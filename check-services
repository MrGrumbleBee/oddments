#!/usr/bin/zsh
typeset CONF='~/check-services.cf' VERBOSE=0 ExitVal=0 RESTART=false COLOR=true
die() { #{{{
    (( VERBOSE > -2 )) && print $@
    exit 1
} #}}}
usage() { #{{{
    typeset PANDOC; PANDOC=$(whence pandoc)
    [[ -x ${PANDOC} ]] || {
        print "Error: 'pandoc' not in path."
        exit
    }
    { pandoc --normalize --standalone --write=man | man -l - } <<-\EOF
	% CHECK-SERVICES(1) check-services user manual
	% Garrison Hoffman <garrison.hoffman@gmail.com>
	
	# NAME
	
	check-services â€” check-services user manual
	
	# SYNOPSIS
	
	check-services [*OPTIONS*]
	
	# DESCRIPTION
	
	This script uses **service(8)** to query System V init scripts or
	upstart jobs, optionally restarting services where needed.
	
	The script will exit **TRUE** if all services are found running, otherwise
	the exit value will be equivalent to the number of configured services
	not running or restarted.
	
	# OPTIONS
	
	-c *FILE*, --config=*FILE*
	:   Specify an alternative to *~/check-services.cf*
	--color, --no-color
	:   Enable or disable color output.
	-h, --help
	:   Show usage, then exit.
	-r, --restart
	:   Use **service(8)** to restart any stopped services.
	-v, -q
	:   Increment, decrement verbosity with each use.
	--verbosity=*N*
	:   Set an explicit verbosity level.
	
	# VERBOSITY LEVELS
	
	-vv (--verbose=*2*)
	:   Print full status of all configured services.
	-v  (--verbose=*1*)
	:   Include abbreviated status of running services.
	--verbose=*0*
	:   Print full status for services which are not running.
	-q  (--verbose=*-1*)
	:   Print abbreviated status for services which are not running.
	-qq (--verbose=*-2*)
	:   Disable status messages entirely. No output will be produced
	    by this script, though messages from **service(8)** restarts are not
	    surpressed. (see **--restart**)
	
	EOF
    exit
} #}}}
process_options() { #{{{
    PARAMS=$(getopt -o c:hqrv \
        --long config:,color,no-color,help,restart,verbose:: \
        -n $0 -- "$@")
    # Bail unless getopt returned 0
    [[ $? = 0 ]] || die Terminating...

    eval set -- ${PARAMS}
    while true; do
        case ${1} in
            -c | --config)  CONF=$2;      shift 2;;
            -h | --help)    usage;        shift;;
            -r | --restart) RESTART=true; shift;;
            --color)        COLOR=true;   shift;;
            --no-color)     COLOR=false;  shift;;

            -q)             (( VERBOSE-- )); shift;;
            -v)             (( VERBOSE++ )); shift;;
            --verbose)      case ${2} in
                            "") (( VERBOSE++ )); shift 2;;
                            *) VERBOSE=${2};     shift 2;;
                            esac;;

            --) shift; break;;
             *) usage;;
        esac
    done
    ARGS+=($@)
} #}}}
get_pid() { #{{{
    typeset PID
    # Use stated PID if available.
    if [[ ${2} =~ '\d\d\d+' ]] {
        PID=${MATCH}
    } elif [[ -r "/var/run/${1}.pid" ]] {
        PID=$(< /var/run/${1}.pid)
    # Process name overrides... #{{{
    } elif [[ ${1} = 'bind9' ]] {
        PID=$(pgrep -o named)
    } elif [[ ${1} = 'clamav-daemon' ]] {
        PID=$(pgrep -o clamd)
    } elif [[ ${1} = 'clamav-freshclam' ]] {
        PID=$(pgrep -o freshclam)
    #}}}
    } else {
        PID=$(pgrep -of ${1})
    }
    # Pad low PID
    if (( ${#PID} < 4 )) {
        print ${(l:4::0:)PID}
    } else {
        print ${PID}
    }
} #}}}
get_status () { #{{{
    typeset STATUS
    STATUS=$(sudo service ${1} status |& cat)
    if [[ "${STATUS}" =~ '(is running|start/running|unrecognized).*' ]] {
        print ${MATCH}
    } else {
        print ${STATUS}
    }
} #}}}
output () { #{{{
    typeset PID=${1} SERVICE=${2} STATUS=${3} C1=${4} C2=${5}
    ${COLOR} && {
        print -Pn "%F{blue}[%F{${C2}}${PID}%F{blue}] "
        print -Pn "%F{${C1}}%B${SERVICE}%b"
        print -P " %F{${C2}}${STATUS}%f"
    }
    ${COLOR} || print "[${PID}] ${SERVICE} (${STATUS})"
} #}}}
test_service () { #{{{
    typeset SERVICE=${1} STATUS PID
    STATUS=$(get_status ${SERVICE})
    if [[ "${STATUS}" =~ 'unrecognized' ]] {
        (( ${VERBOSE} > 1 )) && {
            output '----' ${SERVICE} ${STATUS} black blue
        }
    } elif [[ "${STATUS}" =~ 'start/running|is running' ]] {
        (( ${VERBOSE} > 0 )) && {
            PID=$(get_pid ${SERVICE} ${STATUS})
            (( ${VERBOSE} < 2 )) && STATUS=''
            output ${PID} ${SERVICE} "${STATUS}" blue magenta
        }
    } else {
        (( ExitVal++ ))
        (( VERBOSE > -2 )) && {
            (( ${VERBOSE} < 0 )) && STATUS=''
            output 'WARN' ${SERVICE} "${STATUS}" red yellow
        }
        ${RESTART} && sudo service ${SERVICE} restart
    }
} #}}}
loop_services () { #{{{
    typeset -a Services
    if [[ -r ${~CONF} ]] {
        Services=$(grep -v '^#' ${~CONF})
    } else {
        die "Can't read ${CONF}"
    }
    for S (${(f)Services}) { test_service ${S} }
    exit ${ExitVal}
} #}}}
process_options $@
loop_services
